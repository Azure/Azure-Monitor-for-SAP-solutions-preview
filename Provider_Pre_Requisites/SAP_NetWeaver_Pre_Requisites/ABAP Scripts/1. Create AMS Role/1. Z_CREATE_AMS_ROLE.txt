*&---------------------------------------------------------------------*
*& Report Z_CREATE_AMS_ROLE
*&---------------------------------------------------------------------*
*& This program is used to create a new role in PFCG transaction with the
*& roles as input in the excel file format
*&---------------------------------------------------------------------*
REPORT z_create_ams_role.

FIELD-SYMBOLS : <gt_data> TYPE STANDARD TABLE .

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME .
PARAMETERS : p_argn TYPE agr_name OBLIGATORY,
             p_file TYPE ibipparms-path OBLIGATORY.
SELECTION-SCREEN END OF BLOCK b1 .

*--------------------------------------------------------------------*
* at selection screen
*--------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.

  DATA: lv_rc TYPE i.
  DATA: lt_file_table TYPE filetable,
        ls_file_table TYPE file_table.

  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      window_title = 'Select a file'
    CHANGING
      file_table   = lt_file_table
      rc           = lv_rc.
  IF sy-subrc = 0.
    READ TABLE lt_file_table INTO ls_file_table INDEX 1.
    p_file = ls_file_table-filename.
  ENDIF.

START-OF-SELECTION .
  DATA: gt_xlmap TYPE STANDARD TABLE OF alsmex_tabline,     "table and workarea to store raw data from Mapping excel sheet
        gw_xlmap TYPE alsmex_tabline.

  PERFORM  read_file.
  PERFORM process_file.

FORM read_file.
  DATA: lv_e          TYPE c VALUE 'E',
        lv_a          TYPE c VALUE 'A',
        lv_begin_col  TYPE i VALUE '1',
        lv_begin_row1 TYPE i VALUE '1',
        lv_begin_row  TYPE i VALUE '2',
        lv_end_col    TYPE i VALUE '1000',
        lv_end_row    TYPE i VALUE '100000'.

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_file
      i_begin_col             = lv_begin_col
      i_begin_row             = lv_begin_row
      i_end_col               = lv_end_col
      i_end_row               = lv_end_row
    TABLES
      intern                  = gt_xlmap
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.
    WRITE : /'Unable to translate excel file into the internal table'.
  ENDIF.
ENDFORM.

FORM process_file.
  CONSTANTS: lc_c TYPE c VALUE 'C',
             lc_s TYPE c VALUE 'S'.

  DATA : lt_create_role      TYPE /grcpi/gria_t_create_role,
         lw_create_role      TYPE /grcpi/gria_s_create_role,
         lt_role_details     TYPE /grcpi/gria_t_role_details,
         lw_role_details     TYPE /grcpi/gria_s_role_details,
         lt_role_description TYPE /grcpi/gria_t_role_des_t,
         lw_role_description TYPE /grcpi/gria_s_role_des_t,
         lt_role_obj         TYPE /grcpi/gria_t_role_object,
         lw_role_obj         TYPE /grcpi/gria_s_role_object,
         lv_return_code      TYPE /grcpi/gria_count,
         lt_message          TYPE  bapiret2_tab,
         lw_message          TYPE  bapiret2,
         lt_operation_result TYPE /grcpi/gria_t_opreation_result.

  FIELD-SYMBOLS: <lfs_excel>  TYPE          alsmex_tabline.

**  Role information
  lw_create_role-iv_operation  = lc_c." Create
  lw_create_role-iv_lang  = sy-langu." System Language
  lw_create_role-iv_gen_prof  = abap_true." System Languagen
  lw_role_details-agr_name = p_argn.
  lw_role_details-agr_type = lc_s. " single Role
  lw_role_description-line = 00001.
  lw_role_description-text = 'AMS NETWEAVER MONITORING ACCESS'.
  lw_role_description-spras = sy-langu.
  APPEND lw_role_description TO lt_role_description.
  lw_role_details-text =  lt_role_description.
  APPEND lw_role_details TO lt_role_details.
  lw_create_role-it_role = lt_role_details.

  LOOP AT gt_xlmap ASSIGNING <lfs_excel>.
    lw_role_obj-agr_name = p_argn.
    lw_role_obj-auth_flag = abap_true.
    CASE <lfs_excel>-col.
      WHEN 1. " Class
        lw_role_obj-class = <lfs_excel>-value.
      WHEN 2. " Object
        lw_role_obj-object = <lfs_excel>-value.
      WHEN 3. " Auth
        lw_role_obj-auth = <lfs_excel>-value.
      WHEN 4. " Field
        lw_role_obj-field = <lfs_excel>-value.
      WHEN 5. " low
        lw_role_obj-low = <lfs_excel>-value.
    ENDCASE.
** Append each entry
    AT END OF row.
      APPEND lw_role_obj TO lt_role_obj.
      CLEAR lw_role_obj.
    ENDAT.
  ENDLOOP.

  lw_create_role-it_role_obj = lt_role_obj.
  APPEND lw_create_role TO lt_create_role.

** Create Role
  CALL FUNCTION '/GRCPI/GRIA_ROLE_CREATE'
    EXPORTING
      it_create_role      = lt_create_role
    IMPORTING
      ev_return_code      = lv_return_code
    TABLES
      et_message          = lt_message
      et_operation_result = lt_operation_result.

** Log error
  IF lv_return_code <> 0.
    READ TABLE lt_message INTO lw_message WITH KEY type = 'E'.
    IF sy-subrc IS INITIAL.
      WRITE : lw_message-message.
    ENDIF.
  ELSE.
    WRITE : /'Role Created Successfully'.
  ENDIF.
ENDFORM.